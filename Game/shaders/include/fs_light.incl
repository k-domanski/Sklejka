#include "include/shadow_data.incl"

layout(std140) uniform u_Directional {
  vec3 u_Direction;
  vec3 u_Ambient;
  vec3 u_Diffuse;
  vec3 u_Specular;
  float u_Intensity;
};

vec3 ndc2uv(vec3 ndc) {
  return (ndc + 1.0) * 0.5;
}
vec3 uv2ndc(vec3 uv) {
  return uv * 2.0 - 1.0;
}

float calculateShadow(vec3 lightSpacePosUV, sampler2D shadowMap, float bias) {
  vec2 texelSize     = 1.0 / textureSize(shadowMap, 0);
  float currentDepth = lightSpacePosUV.z;
  if (currentDepth > 1.0) {
    return 0.0f;
  }
  float shadow           = 0.0f;
  for (int i = -1; i <= 1; ++i) {
    for (int j = -1; j <= 1; ++j) {
      float depth = texture(shadowMap, lightSpacePosUV.xy + vec2(j, i) * texelSize).r;
      shadow += ((currentDepth - bias) > depth ? 1.0 : 0.0);
    }
  }
  return shadow / 9.0f;
}

vec3 calculateDirectionalLight(vec3 normal, vec2 uv, float shadow) {  //, vec3 viewDirection) {
  /*ambient*/
  vec3 ambient = u_Ambient * texture(u_MainTexture, uv).rgb;

  /*diffuse*/
  vec3 norm     = normalize(normal);
  vec3 lightDir = normalize(-u_Direction);
  float diff    = max(dot(norm, lightDir), 0.0);
  vec3 diffuse  = u_Diffuse * diff * texture(u_MainTexture, uv).rgb;

  ///*specular*/
  // vec3 reflectDir = reflect(-lightDir, norm);
  // vec3 halfwayDir = normalize(lightDir + viewDirection);
  // float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
  // vec3 specular = u_Specular * (spec * material.specular);

  float shadow_coeff = (1.0 - shadow);
  vec3 result        = (ambient + diffuse * shadow_coeff /*+ specular*/) * u_Intensity;
  return result;
}
vec3 calculateDirectionalLightColor(vec3 normal, vec4 maincolor,
                                    float shadow) {  //, vec3 viewDirection) {
  /*ambient*/
  vec3 ambient = u_Ambient * vec3(maincolor);

  /*diffuse*/
  vec3 norm     = normalize(normal);
  vec3 lightDir = normalize(-u_Direction);
  float diff    = max(dot(norm, lightDir), 0.0);
  vec3 diffuse  = u_Diffuse * diff * vec3(maincolor);

  ///*specular*/
  // vec3 reflectDir = reflect(-lightDir, norm);
  // vec3 halfwayDir = normalize(lightDir + viewDirection);
  // float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
  // vec3 specular = u_Specular * (spec * material.specular);
  float shadow_coeff = (1.0 - shadow);
  vec3 result        = (ambient + diffuse * shadow_coeff /*+ specular*/) * u_Intensity;
  return result;
}
