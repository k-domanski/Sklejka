layout(std140) uniform u_Directional {
	vec3 u_Direction;
	vec3 u_Ambient;
	vec3 u_Diffuse;
	vec3 u_Specular;
	float u_Intensity;
};

vec3 calculateDirectionalLight(vec3 normal, vec2 uv) { //, vec3 viewDirection) {
	/*ambient*/
	vec3 ambient = u_Ambient * texture(u_MainTexture, uv).rgb;

	/*diffuse*/
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(-u_Direction);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = u_Diffuse * diff * texture(u_MainTexture, uv).rgb;

	///*specular*/
	//vec3 reflectDir = reflect(-lightDir, norm);
	//vec3 halfwayDir = normalize(lightDir + viewDirection);
	//float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
	//vec3 specular = u_Specular * (spec * material.specular);


	vec3 result = (ambient + diffuse /*+ specular*/) * u_Intensity;
	return result;
}
vec3 calculateDirectionalLightColor(vec3 normal, vec4 maincolor) { //, vec3 viewDirection) {
	/*ambient*/
	vec3 ambient = u_Ambient * vec3(maincolor);

	/*diffuse*/
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(-u_Direction);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = u_Diffuse * diff * vec3(maincolor);

	///*specular*/
	//vec3 reflectDir = reflect(-lightDir, norm);
	//vec3 halfwayDir = normalize(lightDir + viewDirection);
	//float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
	//vec3 specular = u_Specular * (spec * material.specular);


	vec3 result = (ambient + diffuse /*+ specular*/) * u_Intensity;
	return result;
}
