uniform float u_Metalness = 0.0f;
uniform float u_Roughness = 0.0f;
uniform float u_F0        = 0.04f;

const float PI = 3.1415926535897932384626433832795;

vec3 halfVec(vec3 a, vec3 b) {
  return normalize(a + b);
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
  return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

float distributionGGX(vec3 N, vec3 H, float roughness) {
  float a      = roughness * roughness;
  float a2     = a * a;
  float NdotH  = max(dot(N, H), 0.0f);
  float NdotH2 = NdotH * NdotH;

  float denom = (NdotH2 * (a2 - 1.0f) + 1.0f);
  denom       = PI * denom * denom;
  return a2 / denom;
}

float geometrySchlickGGX(float NdotV, float roughness) {
  float r = roughness + 1.0f;
  float k = (r * r) / 8.0f;

  return NdotV / (NdotV * (1.0f - k) + k);
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
  float NdotV = max(dot(N, V), 0.0f);
  float NdotL = max(dot(N, L), 0.0f);
  float ggx2  = geometrySchlickGGX(NdotV, roughness);
  float ggx1  = geometrySchlickGGX(NdotL, roughness);

  return ggx1 * ggx2;
}

vec3 PBR(vec3 N, vec3 V, vec3 L, vec3 F0, vec3 albedo, float roughness, float metalness) {
  vec3 H  = halfVec(L, V);
  float D = distributionGGX(N, H, roughness);
  float G = geometrySmith(N, V, L, roughness);
  vec3 F  = fresnelSchlick(max(dot(H, V), 0.0f), F0);
  vec3 kD = (vec3(1.0f) - F) * (1.0f - metalness);

  vec3 num      = D * F * G;
  float denom   = 4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f);
  vec3 specular = num / max(denom, 0.001f);
  float NdotL   = max(dot(N, L), 0.0f);
  return (kD * albedo / PI + specular) * NdotL;
}

// void main() {
//   vec3 nnormal       = normalize(normal_matrix * normalize(frag_normal));
//   vec3 viewDirection = normalize(u_camera_pos - frag_pos);
//   vec3 fragColor     = gammaExtraction(texture(texture_diffuse0, uv_pos).rgb);
//   vec3 F0            = mix(vec3(u_f0), fragColor, u_metalness);

//   vec3 out_rgb = {0.0f, 0.0f, 0.0f};

//   // Point Lights
//   for (int i = 0; i < 2; ++i) {
//     vec3 lightDirection = normalize(pointLights[i].position - frag_pos);
//     float att           = attenuation(pointLights[i].position, frag_pos);
//     vec3 radiance       = pointLights[i].color * att;

//     out_rgb += PBR(nnormal, viewDirection, lightDirection, F0, fragColor, u_roughness,
//     u_metalness)
//                * radiance;
//   }

//   // Directional Light
//   out_rgb += PBR(nnormal, viewDirection, -directionalLight.direction, F0, fragColor, u_roughness,
//                  u_metalness)
//              * directionalLight.color * directionalLight.strength;

//   // Spotlights
//   for (int i = 0; i < 2; ++i) {
//     vec3 lightDirection = normalize(spotlights[i].position - frag_pos);
//     float att           = attenuation(spotlights[i].position, frag_pos);
//     vec3 radiance       = spotlights[i].color * att;
//     float cosTheta      = dot(spotlights[i].direction, -lightDirection);
//     if (cosTheta > cos(spotlights[i].phi / 2.0f)) {
//       out_rgb +=
//           PBR(nnormal, viewDirection, lightDirection, F0, fragColor, u_roughness, u_metalness)
//           * radiance;
//     }
//   }

//   out_rgb += u_ambient * fragColor;

//   // Post Process
//   out_rgb   = gammaCorrection(out_rgb);
//   out_color = vec4(out_rgb.rgb, 1.0f);
// }
